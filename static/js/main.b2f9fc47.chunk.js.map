{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.b2f9fc47.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link, NavLink } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">About</a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {title : PropTypes.string.isRequired}\r\nNavbar.defaultProps ={title: 'Set title here'};","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked\"+text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n      let newText = text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  }\r\n\r\n    const handleClearClick = () => {\r\n      let newText = '';\r\n      setText(newText);\r\n      props.showAlert(\"Text cleared!\", \"success\");\r\n  }\r\n\r\n    const handleCopy = () => {\r\n      var text = document.getElementById(\"myBox\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\"Text copied to clipboard!\", \"success\");\r\n  }\r\n\r\n    const handleExtraSpaces = () => {\r\n      let newText = text.split(/[ ]+/);\r\n      setText(newText.join(\" \"));\r\n      props.showAlert(\"Extra spaces removed!\", \"success\");\r\n  }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text,setText] =useState('');\r\n  return (\r\n    <>\r\n    <div className='container' style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to lowercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear text</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy text</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n    </div>\r\n    <div className='container my-3' style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n      <h2>Text summary</h2>\r\n      <p>{(text.length===0 || text.charAt(text.length-1)===' ')? text.split(\" \").length-1 : text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{ 0.008 * text.split(\" \").length} Minutes read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0 ? text: \"Enter something in the above textbox to preview it in here\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    },1500);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      document.title= `Textutils - Dark Mode`;\n      // setInterval(() => {\n      //   document.title=`Textutils is amazing`;\n      // },2000)\n      // setInterval(() => {\n      //   document.title=`Install Textutils now`;\n      // },1500)\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n      document.title=`Textutils - Light Mode`;\n    }\n  }\n  return (\n    <>\n    {/* <BrowserRouter> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n          {/* <Routes>\n            <Route index element={<TextForm showAlert={showAlert} heading=\"Enter the text here to analyze below\" mode={mode}/>} />\n            <Route exact path=\"/about\" element={<About/>} />\n          </Routes> */}\n        <TextForm showAlert={showAlert} heading=\"Enter the text here to analyze below\" mode={mode}/>\n      </div>\n      {/* </BrowserRouter>   */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}